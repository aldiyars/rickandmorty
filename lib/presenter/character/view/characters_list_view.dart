import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:rickandmorty/domain/entities/character.dart';import 'package:rickandmorty/presenter/character/cubit/character_cubit.dart';import 'package:rickandmorty/presenter/character_detail/view/character_detail_view.dart';import 'package:rickandmorty/presenter/widget/loading_indicator.dart';class CharactersView extends StatelessWidget {  final scrollController = ScrollController();  void setupScrollController(context) {    scrollController.addListener(() {      if (scrollController.position.atEdge) {        if (scrollController.position.pixels != 0) {          BlocProvider.of<CharacterCubit>(context).loadCharacters();        }      }    });  }  @override  Widget build(BuildContext context) {    setupScrollController(context);    BlocProvider.of<CharacterCubit>(context).loadCharacters();    return Scaffold(      appBar: AppBar(        title: const Text('Characters'),      ),      body: BlocBuilder<CharacterCubit, CharacterState>(        builder: (context, state) {          if (state is CharacterLoadingState && state.isFirstFetch) {            return const LoadingIndicator();          }          if (state is CharacterErrorState) {            return Center(child: Text(state.error.toString()));          }          List<Character> characters = [];          bool isLoading = false;          if (state is CharacterLoadingState) {            characters = state.oldCharacters;            isLoading = true;          } else if (state is CharacterSuccesLoadedState) {            characters = state.characters;          }          return RefreshIndicator(            onRefresh: () => context.read<CharacterCubit>().loadCharacters(onRefresh: true),            child: Scrollbar(              child: ListView.separated(                controller: scrollController,                itemBuilder: (BuildContext context, int index) {                  if (index < characters.length) {                    return _buildItem(context, characters[index]);                  } else {                    scrollController.jumpTo(scrollController.position.maxScrollExtent);                    return const LoadingIndicator();                  }                },                separatorBuilder: (BuildContext context, int index) => const Divider(),                itemCount: characters.length + (isLoading ? 1 : 0),              ),            ),          );        },      ),    );  }  Widget _buildItem(    BuildContext context,    Character character,  ) {    return ListTile(      onTap: () {        Navigator.push(          context,          MaterialPageRoute(builder: (context) => CharacterDetailView(character: character)),        );        // context.read<CharacterDetailCubit>().loadCharacters()      },      title: Text(character.name ?? ''),      leading: CachedNetworkImage(        imageUrl: character.image ?? '',        placeholder: (context, url) => const CircularProgressIndicator(),        errorWidget: (context, url, error) => const Icon(Icons.error),      ),      subtitle: Text('from ${character.status}'),    );  }}