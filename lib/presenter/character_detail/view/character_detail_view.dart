import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:rickandmorty/data/rest_client.dart';import 'package:rickandmorty/domain/entities/character.dart';import 'package:rickandmorty/presenter/character_detail/cubit/character_detail_cubit.dart';import 'package:rickandmorty/presenter/widget/loading_indicator.dart';class CharacterDetailView extends StatelessWidget {  final Character character;  const CharacterDetailView({Key? key, required this.character}) : super(key: key);  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text(character.name ?? ''),      ),      body: BlocProvider(        create: (context) => CharacterDetailCubit(RepositoryProvider.of<RestClient>(context))          ..getCharacterByID(            character.id ?? 0,          ),        child: BlocBuilder<CharacterDetailCubit, CharacterDetailState>(          builder: (context, state) {            if (state is CharacterDetailLoadingState) {              return const LoadingIndicator();            }            if (state is CharacterDetailErrorState) {              return Center(child: Text(state.error.toString()));            }            if (state is CharacterDetailSuccsesLoadState) {              return _buildCharacter(context, state.character);            }            return const SizedBox.shrink();          },        ),      ),    );  }  Widget _buildCharacter(BuildContext context, Character character) {    return ListView(      children: [        CachedNetworkImage(          imageUrl: character.image ?? '',          placeholder: (context, url) => const CircularProgressIndicator(),          errorWidget: (context, url, error) => const Icon(Icons.error),          width: double.infinity,          height: MediaQuery.of(context).size.width / 1.5,          fit: BoxFit.cover,        ),        _rowDate('Статус', character.status ?? ''),        _rowDate('Пол', character.gender == 'Male' ? 'Муж.' : 'Жен.'),      ],    );  }  Widget _rowDate(String label, String data) {    return Padding(      padding: const EdgeInsets.all(8.0),      child: Row(        children: [          Text(            label + ': ',            style: const TextStyle(color: Colors.black45),          ),          Text(data, style: const TextStyle(fontWeight: FontWeight.bold)),        ],      ),    );  }}